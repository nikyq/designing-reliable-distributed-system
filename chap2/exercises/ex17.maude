--- load ex9.maude
load ../hello_world.maude

fmod INT is
    protecting BOOLEAN . 

    sorts Zero NzNat NzNeg Nat Neg NzInt Int .

    subsorts Zero < Nat Neg < Int .
    subsort NzNat < Nat .
    subsort NzNeg < Neg .
    subsorts NzNat NzNeg < NzInt < Int .

    op 0 : -> Zero [ctor] .
    op s : Nat -> NzNat [ctor] .
    op p : Neg -> NzNeg [ctor] .
    ops _+_ _-_ : Int Int -> Int [prec 33] .

    op _/_ : Int NzInt -> Int .
    op _*_ : Int Int -> Int .

    op -_ : Neg -> Nat .
    op -_ : Nat -> Neg .

    op invNat : Nat Neg -> Neg .
    op invNeg : Neg Nat -> Nat .

    op half : Int -> Int .
    ops _monus_ diff max min : Nat Nat -> Nat .
    ops odd even : Nat -> Boolean .
    ops _<=_ _>_ _>=_ _==_ : Int Int -> Boolean .

    vars M N : Nat .
    vars MN NN : Neg .
    var I : Int .
    var NZNEG : NzNeg .
    vars NZN NZN' : NzNat .

    eq 0 + I = I .
    eq s(M) + N = s(M + N) .

    eq I - 0 = I .
    eq 0 - NZN = - NZN .
    eq s(M) - s(N) = M - N .

    eq invNat(0, NN) = NN .
    eq invNat(s(M), NN) = invNat(M, p(NN)) .

    eq invNeg(0, N) = N .
    eq invNeg(p(MN), N) = invNeg(MN, s(N)) .

    eq - M = invNat(M,  0) .
    eq - MN = invNeg(MN, 0) .

    eq p(MN) + NN = p(MN + NN) .
    eq M + NN = M - (- NN) .
    eq MN + N = N - (- MN) .

    eq 0 - NN = - NN .
    eq MN - NN = MN + (- NN) .
    eq M - NN = M + (- NN) .
    eq MN - N = -((- MN) + N) .
    
endfm
