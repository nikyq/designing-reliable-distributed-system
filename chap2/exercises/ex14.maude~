fmod Bits is
    sort Bit .
    sort Bits .

    op 0 : -> Bit [ctor] .
    op 1 : -> Bit [ctor] .

    op _+_ : Bit Bit -> Bit .
    op carry : Bit Bit -> Bit .

    op nil : -> Bits [ctor] .
    op __ : Bits Bit -> Bits [ctor] .

    op neg : Bits -> Bits .
    op add : Bits Bits Bit -> Bits .
    op _+_ : Bits Bits -> Bits .

    vars B0 B1 B2 B3 : Bit .
    vars L L' : Bits .

    eq 0 + 0 = 0 .
    eq 0 + 1 = 1 .
    eq 1 + 0 = 1 .
    eq 1 + 1 = 0 .

    eq carry(0, 0) = 0 .
    eq carry(0, 1) = 1 .
    eq carry(1, 0) = 1 .
    eq carry(1, 1) = 0 .

    eq neg(nil) = nil .
    eq neg(L 0) = neg(L) 1 .
    eq neg(L 1) = neg(L) 0 .

    eq add(nil, nil, 0) = nil .
    eq add(nil, nil, 1) = nil 1 .
    eq add(L B0, nil, B1) = add(L, nil, carry(B0, B1)) (B0 + B1) .
    eq add(L B0, L' B1, B2) = add(L, L', carry(carry(B0, B1), B2)) ((B0 + B1) + B2) .

    *** eq B0 + B1 = add(B0, B1, 0) .

endfm
